import logging
import os

import webob.dec
import webob.exc
from paste.deploy import loadapp
from wsgiref.simple_server import make_server

import routes.middleware

#Environment variable used to pass the request context
CONTEXT_ENV = 'openstack.context'


#Environment variable used to pass the request params
PARAMS_ENV = 'openstack.params'

LOG = logging.getLogger(__name__)

class Controller(object):
    @webob.dec.wsgify
    def __call__(self, req):
	arg_dict = req.environ['wsgiorg.routing_args'][1]
	action = arg_dict.pop('action')
	del arg_dict['controller']

	context = req.environ.get(CONTEXT_ENV, {})
	context['query_string'] = dict(req.params.iteritems())
	context['headers'] = dict(req.headers.iteritems())
	context['path'] = req.environ['PATH_INFO']
	params = req.environ.get(PARAM_ENV, {})

	for name in ['REMOTE_USER', 'AUTH_TYPE']:
	    try:
		context[name] = req.environ[name]
	    except KeyError:
		try:
		    del context[name]
		except KeyError:
		    pass

	params.update(arg_dict)

	#TODO(termie): do some basic normalization on methods
	method = getattr(self, action)

	result = method(context, **params)

	return webob.Response('ok')

    def getMessage(self, context, user_id):
	return {'Message': 'TestMessage'}
	pass

class Router(object):
    def __init__(self):
	self._mapper = routes.Mapper()
	self._mapper.connect('/test/{user)id}',
			    controller=Controller(),
			    action='getMessage',
			    conditions={'method':['GET']})
	self._router = routes.middleware.RoutesMiddleware(self._dispath, self._mapper)

    @webob.dec.wsgify
    def __call__(self, req):
	return self._router

    @staticmethod
    @webob.dec.wsgify
    def _dispath(req):
	match = req.environ['wsgiorg.routing_args'][1]

	if not match:
	    return webob.exc.HTTPNotFound()

	app = match['controller']
	return app

    @classmethod
    def app_factory(cls, global_config, **local_config):
	return cls()


if __name__ == '__main__':
    configfile = 'testroutes.ini'
    appname = "main"
    wsgi_app = loadapp('config:%s' % os.path.abspath(configfile), appname)
    httpd = make_server('0.0.0.0', 8282, wsgi_app)
    httpd.serve_forever()

